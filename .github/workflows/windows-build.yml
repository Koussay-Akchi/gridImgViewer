name: Windows EXE Build

on:
  push:
    branches: [ main, master ]
  workflow_dispatch: {}

jobs:
  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka ordered-set zstandard

      - name: Install UPX
        run: choco install upx -y

      - name: Build EXE with Nuitka
        shell: bash
        run: |
          ICON_ARG=""
          if [ -f assets/tk.ico ]; then
            ICON_ARG="--windows-icon-from-ico=assets/tk.ico"
          fi
          python -m nuitka \
            --onefile \
            --plugin-enable=tk-inter \
            --include-package=ttkbootstrap \
            --include-package-data=ttkbootstrap \
            --include-module=PIL.ImageTk \
            --include-module=PIL.ImageOps \
            --windows-console-mode=disable \
            --assume-yes-for-downloads \
            --output-dir=dist \
            --output-filename=GridImgViewer.exe \
            ${ICON_ARG} \
            main.py

      - name: Create Self-Signed Certificate
        shell: pwsh
        run: |
          $cert = New-SelfSignedCertificate -Type CodeSigningCert -Subject "CN=Koussay Akchi" -KeyUsage DigitalSignature -FriendlyName "Koussay Akchi Code Signing" -CertStoreLocation "Cert:\CurrentUser\My" -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.3", "2.5.29.19={text}")
          $pwd = ConvertTo-SecureString -String "temp123" -Force -AsPlainText
          Export-PfxCertificate -Cert $cert -FilePath "code-signing.pfx" -Password $pwd
          echo "CERT_THUMBPRINT=$($cert.Thumbprint)" >> $env:GITHUB_ENV

      - name: Sign Executable
        shell: pwsh
        run: |
          $signtool = Get-Command signtool -ErrorAction SilentlyContinue
          if ($signtool) {
            & signtool sign /f "code-signing.pfx" /p "temp123" /tr "http://timestamp.digicert.com" /td sha256 /fd sha256 "dist\GridImgViewer.exe"
          } else {
            $possiblePaths = @(
              "C:\Program Files (x86)\Windows Kits\10\bin\*\x64\signtool.exe",
              "C:\Program Files (x86)\Windows Kits\10\bin\*\x86\signtool.exe",
              "C:\Program Files\Windows Kits\10\bin\*\x64\signtool.exe"
            )
            $found = $false
            foreach ($path in $possiblePaths) {
              $files = Get-ChildItem -Path $path -ErrorAction SilentlyContinue
              if ($files) {
                & $files[0].FullName sign /f "code-signing.pfx" /p "temp123" /tr "http://timestamp.digicert.com" /td sha256 /fd sha256 "dist\GridImgViewer.exe"
                $found = $true
                break
              }
            }
            if (-not $found) {
              Write-Error "signtool.exe not found in any expected location"
            }
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: GridImgViewer-windows
          path: dist/GridImgViewer.exe
          if-no-files-found: error

      - name: Create GitHub Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.run_id }}
          name: GridImgViewer ${{ github.run_id }}
          draft: false
          prerelease: false
          files: |
            dist/GridImgViewer.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


